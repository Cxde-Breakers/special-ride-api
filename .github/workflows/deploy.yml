name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
          
      - name: Install dependencies
        run: yarn install

      - name: Build the application
        run: yarn build

      - name: Build Docker images
        run: docker compose build

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          # Save SSH private key
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Ensure the remote directory exists
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            mkdir -p /home/ubuntu/app
          EOF
          
          # Copy Docker Compose files and application code to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no compose.yml $USER@$HOST:/home/ubuntu/app/
          scp -i private_key.pem -o StrictHostKeyChecking=no -r dist $USER@$HOST:/home/ubuntu/app/
          scp -i private_key.pem -o StrictHostKeyChecking=no Dockerfile $USER@$HOST:/home/ubuntu/app/
          
          # SSH into the EC2 instance to run Docker Compose commands
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            cd /home/ubuntu/app
            sudo docker compose down
            sudo docker compose up -d --build
          EOF
          
          # Clean up
          rm private_key.pem
