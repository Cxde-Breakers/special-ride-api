name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build the application
        run: yarn build

      - name: Build Docker images
        run: docker compose build

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          REPO_URL: ${{ secrets.REPO_URL }}
        run: |
          set -e

          # Save SSH private key
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Debug information
          echo "Connecting to EC2 instance at $HOST as $USER"

          # Ensure the remote directory exists
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            mkdir -p /home/ubuntu/app
          EOF

          # SSH into the EC2 instance to clone the repository and build the application
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            set -e
            echo "Cloning or pulling repository"
            cd /home/ubuntu/app
            if [ ! -d ".git" ]; then
              git clone $REPO_URL .
            else
              git pull
            fi
            echo "Installing dependencies"
            yarn install
            echo "Building application"
            yarn build
            echo "Building Docker images"
            docker compose build
            echo "Starting Docker containers"
            docker compose up -d
          EOF

          # Clean up
          rm private_key.pem
